Notes:
libft.a - final
-- .a is an extension signifying static library
libft.h - library
-- must compile functions as objects first
-- .o files called "bricks" in intra videos
-----.o objects get made from compiling just functions without mains (gcc -c option)
-- library composed by using command ar with options/instructions rc (ar rc)

-- gcc -L. | tell gcc to look for a library in the current directory
-- gcc -L -lstr | library string to look for str (?)

-- ranlib
---- creates index in library to access functions more quickly (for when 100s of functions etc. exist)
---- saves time when compiling

Makefile
-- special variables
----- https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html#Automatic-Variables
Tutorial
-- 42 NL dude: https://noahloomans.com/tutorials/makefile/

15/05/2022
To Test (static library):
Run test.c using:
gcc -Wall -Werror -Wextra lib.a test.c

size_t - data type defined in several standard libraries - stddef.h is most basic instance

Bus error - attempting to access memory that does not exist.
Segmentation fault - attempting to access memory that is not part of the program calling it.

Void pointer stores a memory address, the memory can contain data of any type.

open a folder in finder using command 'open' in terminal

Testers: 
https://github.com/Tripouille/libftTester
-- enter directory
----- run using make function for individual functions, or make for all

gitignore wildcard character is: *

21/05/2022
Duplicating repository with commit history, etc. to GitHub
https://medium.com/cloud-native-the-gathering/how-to-mirror-copy-an-entire-existing-git-repository-into-a-new-one-3bb8faefad9e

Re-naming a branch (moving)
git branch -m oldname newname

Checking remotes
git remote -v

Pushing to two servers on push, and pulling from them
https://stackoverflow.com/questions/9049773/how-to-git-push-to-two-serversmirror

C commenting guidelines from somewhere psych
http://syque.com/cstyle/ch4.5.htm

Change head of the remote
git remote set-head -d/-a

22/05/22
Conditional operator:?
([condition])?[value if true]:[value if false]
https://stackoverflow.com/questions/57858964/how-to-write-absolute-value-in-c

Signed integer representations
https://en.wikipedia.org/wiki/Signed_number_representations
-- Sign-magnitude
---- The first bit (sign bit) is completely sacrificed to represent negative sign.
---- The rest of the bits represent the magnitude of the number.
---- It means that 0 and -0 exist.
---- In 4-bit: 0000:0, 0111:7, 1000:-0, 1111:-7
-- Ones' complement
---- The bitwise NOT (complement) corresponds to a negative number.
---- Complement example: 0101 -> 1010 (5 -> -5)
---- Bit-wise, binary addition requires end-around carry at limit.
------ 1110:-1 + 0010:2 = (1) 0000:0, but not correct, carry 1, then 0001:1, correct.
---- In 4-bit: 0000:0, 0111:7, 1000:-7, 1111:-0
-- Two's complement
---- Negative number represented by bitwise NOT (complement), plus 1.
---- No multiple zero. (0 and -0).
---- No end-around carry required.
---- Complement + 1: 0010:2 (neg)-> 1101 + 0001 = 1110:-2
---- In 4-bit: 0000: 0, 0111:7, 1000:-8, 1111:-1

a C Integer type uses the two's complement representation.
Ranges are thus (-2ˆ(n-1)) - (2ˆ(n-1) - 1) where n is the bit-resolution.
-- negative has more range.

23/05/2022
!ptr : (ptr == ((void *) 0));
NULL : ((void *) 0);

25/05/2022
substr segmentation fault
-- length was not protected (accessing pointer to length when not necessary)
---- length was larger than needed allocation (no maximum conditions)

01/06/2022
strtrim permalink pythontutor: https://pythontutor.com/visualize.html#code=%23include%20%3Cstdlib.h%3E%0A%0Asize_t%20%20%20%20ft_strlen%28const%20char%20*str%29%0A%7B%0A%20%20%20%20size_t%20%20%20%20i%3B%0A%0A%20%20%20%20i%20%3D%200%3B%0A%20%20%20%20while%20%28str%5Bi%5D%20!%3D%20'%5C0'%29%0A%20%20%20%20%20%20%20%20i%2B%2B%3B%0A%20%20%20%20return%20%28i%29%3B%0A%7D%0A%0Astatic%20unsigned%20char%20%20%20%20*ft_trimalloc%28char%20const%20*s1,%20char%20const%20*set%29%0A%7B%0A%20%20%20%20unsigned%20char%20%20%20%20*ptr%3B%0A%20%20%20%20unsigned%20int%20%20%20%20reqlen%3B%0A%20%20%20%20unsigned%20int%20%20%20%20i%3B%0A%20%20%20%20unsigned%20int%20%20%20%20j%3B%0A%0A%20%20%20%20i%20%3D%200%3B%0A%20%20%20%20j%20%3D%200%3B%0A%20%20%20%20reqlen%20%3D%200%3B%0A%20%20%20%20while%20%28s1%5Bi%5D%20!%3D%20'%5C0'%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20while%20%28set%5Bj%5D%20!%3D%20'%5C0'%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20%28s1%5Bi%5D%20%3D%3D%20set%5Bj%5D%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20reqlen%2B%2B%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20j%2B%2B%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20j%20%3D%200%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20i%2B%2B%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20reqlen%20%3D%20i%20-%20reqlen%3B%0A%20%20%20%20ptr%20%3D%20malloc%28reqlen%29%3B%0A%20%20%20%20if%20%28!ptr%29%0A%20%20%20%20%20%20%20%20return%28%28unsigned%20char%20*%29%200%29%3B%0A%20%20%20%20return%28ptr%29%3B%0A%7D%0A%0Avoid%20%20%20%20*ft_memcpy%28void%20*dst,%20const%20void%20*src,%20size_t%20n%29%0A%7B%0A%20%20%20%20unsigned%20int%20%20%20%20i%3B%0A%20%20%20%20unsigned%20char%20%20%20%20*pdst%3B%0A%20%20%20%20unsigned%20char%20%20%20%20*psrc%3B%0A%0A%20%20%20%20i%20%3D%200%3B%0A%20%20%20%20psrc%20%3D%20%28unsigned%20char%20*%29%20src%3B%0A%20%20%20%20pdst%20%3D%20%28unsigned%20char%20*%29%20dst%3B%0A%20%20%20%20while%20%28n%20%3E%20i%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20pdst%5Bi%5D%20%3D%20psrc%5Bi%5D%3B%0A%20%20%20%20%20%20%20%20i%2B%2B%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20%28%28void%20*%29%20dst%29%3B%0A%7D%0A%0Astatic%20unsigned%20int%20%20%20%20ft_writing%28char%20*ptr1,%20const%20char%20*s1,%20unsigned%20int%20k%29%0A%7B%0A%20%20%20%20ft_memcpy%28ptr1,%20s1,%201%29%3B%0A%20%20%20%20k%2B%2B%3B%0A%20%20%20%20return%20%28k%29%3B%0A%7D%0A%0Achar%20%20%20%20*ft_strtrim%28char%20const%20*s1,%20char%20const%20*set%29%0A%7B%0A%20%20%20%20unsigned%20char%20%20%20%20*ptr%3B%0A%20%20%20%20unsigned%20int%20%20%20%20i%3B%0A%20%20%20%20unsigned%20int%20%20%20%20j%3B%0A%20%20%20%20unsigned%20int%20%20%20%20k%3B%0A%0A%20%20%20%20ptr%20%3D%20ft_trimalloc%28s1,%20set%29%3B%0A%20%20%20%20if%20%28!ptr%29%0A%20%20%20%20%20%20%20%20return%20%28%28char%20*%29%200%29%3B%0A%20%20%20%20i%20%3D%200%3B%0A%20%20%20%20j%20%3D%200%3B%0A%20%20%20%20k%20%3D%200%3B%0A%20%20%20%20if%20%28set%5Bj%5D%20%3D%3D%20'%5C0'%29%0A%20%20%20%20%20%20%20%20return%20%28%28char%20*%29%20ft_memcpy%28ptr,%20s1,%20ft_strlen%28s1%29%20%2B%201%29%29%3B%0A%20%20%20%20while%20%28s1%5Bi%5D%20!%3D%20'%5C0'%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20while%20%28s1%5Bi%5D%20!%3D%20set%5Bj%5D%20%26%26%20set%5Bj%5D%20!%3D%20'%5C0'%20%26%26%20s1%5Bi%5D%20!%3D%20'%5C0'%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20%28set%5Bj%20%2B%201%5D%20%3D%3D%20'%5C0'%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20k%20%3D%20ft_writing%28%28char%20*%29%20%26ptr%5Bk%5D,%20%26s1%5Bi%5D,%20k%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20j%2B%2B%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20j%20%3D%200%3B%0A%20%20%20%20%20%20%20%20i%2B%2B%3B%0A%20%20%20%20%7D%0A%20%20%20%20ptr%5Bk%5D%20%3D%20'%5C0'%3B%0A%20%20%20%20return%20%28%28char%20*%29%20ptr%29%3B%0A%7D%0A%0Aint%20%20%20%20main%28void%29%0A%7B%0A%20%20%20%20char%20%20%20%20s%5B%5D%20%3D%20%22%20%20xxtriple%20%20%20xxx%20xx%20%20xx%22%3B%0A%20%20%20%20char%20%20%20%20set%5B%5D%20%3D%20%22%20x%22%3B%0A%0A%20%20%20%20printf%28%22Test1%3A%20s-%25s,%20set-%25s,%20Out-%25s%22,%20s,%20set,%20ft_strtrim%28s,%20set%29%29%3B%0A%20%20%20%20return%20%280%29%3B%0A%7D&cumulative=false&heapPrimitives=nevernest&mode=edit&origin=opt-frontend.js&py=c_gcc9.3.0&rawInputLstJSON=%5B%5D&textReferences=false

03/06/2022
Arrays in C: https://www.codesdope.com/c-array/
Words permalink pythontutor: https://pythontutor.com/render.html#code=unsigned%20int%20%20%20%20ft_words%28const%20char%20*str,%20int%20ch%29%0A%7B%0A%20%20%20%20unsigned%20int%20%20%20%20i%3B%0A%20%20%20%20unsigned%20int%20%20%20%20cnt%3B%0A%0A%20%20%20%20i%20%3D%200%3B%0A%20%20%20%20cnt%20%3D%200%3B%0A%20%20%20%20while%20%28str%5Bi%5D%20!%3D%20'%5C0'%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20if%20%28str%5Bi%5D%20%3D%3D%20ch%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20%28str%5Bi%20%2B%201%5D%20!%3D%20ch%20%26%26%20str%5Bi%20%2B%201%5D%20!%3D%20'%5C0'%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20cnt%2B%2B%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20i%2B%2B%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20%28cnt%20%3D%3D%200%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20cnt%2B%2B%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20i%2B%2B%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20return%20%28cnt%29%3B%0A%7D%0A%0A%23include%20%3Cstdio.h%3E%0A%0Aint%20main%28void%29%0A%7B%0A%20%20char%20%20str%5B%5D%20%3D%20%22%3B%3Bo%3Bhe%22%3B%0A%20%20char%20%20str2%5B%5D%20%3D%20%22he%3Beo%3B%22%3B%0A%20%20unsigned%20int%20arr%5B2%5D%3B%0A%0A%20%20arr%5B0%5D%20%3D%20ft_words%28str,%20'%3B'%29%3B%0A%20%20arr%5B1%5D%20%3D%20ft_words%28str2,%20'%3B'%29%3B%0A%0A%20%20printf%28%22Result1%3A%20%25d,%20Result2%3A%20%25d%22,%20arr%5B0%5D,%20arr%5B1%5D%29%3B%0A%20%20return%200%3B%0A%7D&cumulative=false&curInstr=71&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=c_gcc9.3.0&rawInputLstJSON=%5B%5D&textReferences=false
More Cases words permalink: https://pythontutor.com/render.html#code=unsigned%20int%20%20%20%20ft_words%28const%20char%20*str,%20int%20ch%29%0A%7B%0A%20%20%20%20unsigned%20int%20%20%20%20i%3B%0A%20%20%20%20unsigned%20int%20%20%20%20cnt%3B%0A%0A%20%20%20%20i%20%3D%200%3B%0A%20%20%20%20cnt%20%3D%200%3B%0A%20%20%20%20while%20%28str%5Bi%5D%20!%3D%20'%5C0'%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20if%20%28str%5Bi%5D%20%3D%3D%20ch%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20%28str%5Bi%20%2B%201%5D%20!%3D%20ch%20%26%26%20str%5Bi%20%2B%201%5D%20!%3D%20'%5C0'%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20cnt%2B%2B%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20i%2B%2B%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20%28cnt%20%3D%3D%200%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20cnt%2B%2B%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20i%2B%2B%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20return%20%28cnt%29%3B%0A%7D%0A%0A%23include%20%3Cstdio.h%3E%0A%0Aint%20main%28void%29%0A%7B%0A%20%20char%20%20str%5B%5D%20%3D%20%22%3B%3Bo%3Bhe%22%3B%0A%20%20char%20%20str2%5B%5D%20%3D%20%22he%3Beo%3B%22%3B%0A%20%20char%20%20str3%5B%5D%20%3D%20%22%3B%3Bo%3Bhe%3B%3B%3B%3B%3B%22%3B%0A%20%20char%20%20str4%5B%5D%20%3D%20%7B'%3B',%20'%3B',%20'%3B',%20'%3B',%20'%3B',%20'%5C0'%7D%3B%0A%20%20unsigned%20int%20arr%5B4%5D%3B%0A%0A%20%20arr%5B0%5D%20%3D%20ft_words%28str,%20'%3B'%29%3B%0A%20%20arr%5B1%5D%20%3D%20ft_words%28str2,%20'%3B'%29%3B%0A%20%20arr%5B2%5D%20%3D%20ft_words%28str3,%20'%3B'%29%3B%0A%20%20arr%5B3%5D%20%3D%20ft_words%28str4,%20'%3B'%29%3B%0A%0A%20%20printf%28%22Result1%3A%20%25d,%20Result2%3A%20%25d%5Cn%22,%20arr%5B0%5D,%20arr%5B1%5D%29%3B%0A%20%20printf%28%22Result3%3A%20%25d,%20Result4%3A%20%25d%22,%20arr%5B2%5D,%20arr%5B3%5D%29%3B%0A%20%20return%200%3B%0A%7D&cumulative=false&curInstr=155&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=c_gcc9.3.0&rawInputLstJSON=%5B%5D&textReferences=false

14/07/2022
File Descriptors, Open Flags
open() from unistd.h https://en.wikibooks.org/wiki/C_Programming/POSIX_Reference/unistd.h/open#oflag
Flags 
- "O_APPEND" Open and append writes to end.
More https://www.geeksforgeeks.org/input-output-system-calls-c-create-open-close-read-write/

16/07/2022
ft_itoa
n = -n : couldn't be handled with normal int as the -ve is asymetrical, you lose one digit of value, use long instead.

20/07/2022
norminette works with: export PATH="$HOME/.local/bin:$PATH"

25/07/2022
substr - special cases:
- start > slen
-- means substr outside of string 
---> return null char
- len >> slen
-- allocating way too much memory, must end at end of string
- len + start > slen
-- substr in the range longer than string
